# BE WARNED, DO NOT RUN THIS TEST IF YOU VALUE YOUR IDENTIDOC DATABASE, RECORDS WILL BE ERASED, BACK IT UP SOMEWHERE FIRST

import unittest
import sqlite3

from identidoc.services.database import ClassificationResultTableRow, ClassificationResultQuery, QueryResultRow, insert_record_command, retrieve_records_query, validate_database, identidoc_db

class TestDB(unittest.TestCase):
    # Ensure that the database exists with the correct table
    # Make sure no records are in the database before the unittest
    def setUp(self):
        validate_database()

        sql_delete_records = """DELETE FROM classifications;"""

        conn = sqlite3.connect(identidoc_db)

        c = conn.cursor()
        c.execute(sql_delete_records)
        conn.commit()
        conn.close()
    

    # This test will check the validation of the ClassificationResultTableRow
    # In the constructor, if the arguements are invalid, a None object is returned
    def test_ClassificationResultTableRow_constructor(self):
        # All arguemnents of ClassificationResultTableRow must not be None
        no_filename = ClassificationResultTableRow(None, 0, False)
        no_classification = ClassificationResultTableRow('1609865062.Class3-2.pdf', None, False)
        no_signature = ClassificationResultTableRow('1609865062.Class3-2.pdf', 0, None)

        assert no_filename.is_invalid
        assert no_classification.is_invalid
        assert no_signature.is_invalid

        # The filename should be and is assumed to be generated by identiDoc, so no real validation on it

        # Classification must be an int between 0 and 5 inclusive
        classification_wrong_datatype_1 = ClassificationResultTableRow('1610121696.file.png', ['list', 'for', 'some', 'reason'], True)
        classification_wrong_datatype_2 = ClassificationResultTableRow('1610121696.file.png', 'classification', True)
        classification_wrong_datatype_3 = ClassificationResultTableRow('1610121696.file.png', 2.1, True)

        assert classification_wrong_datatype_1.is_invalid
        assert classification_wrong_datatype_2.is_invalid
        assert classification_wrong_datatype_3.is_invalid

        # Correct data type and valid values
        classification_correct_datatype_0 = ClassificationResultTableRow('1610121696.file.png', 0, False)
        classification_correct_datatype_1 = ClassificationResultTableRow('1610121696.file.png', 1, False)
        classification_correct_datatype_2 = ClassificationResultTableRow('1610121696.file.png', 2, False)
        classification_correct_datatype_3 = ClassificationResultTableRow('1610121696.file.png', 3, False)
        classification_correct_datatype_4 = ClassificationResultTableRow('1610121696.file.png', 4, False)
        classification_correct_datatype_5 = ClassificationResultTableRow('1610121696.file.png', 5, False)

        assert not classification_correct_datatype_0.is_invalid
        assert not classification_correct_datatype_1.is_invalid
        assert not classification_correct_datatype_2.is_invalid
        assert not classification_correct_datatype_3.is_invalid
        assert not classification_correct_datatype_4.is_invalid
        assert not classification_correct_datatype_5.is_invalid

        classification_outside_range_1 = ClassificationResultTableRow('1610121696.file.png', -1, True)
        classification_outside_range_2 = ClassificationResultTableRow('1610121696.file.png', 6, True)
        classification_outside_range_3 = ClassificationResultTableRow('1610121696.file.png', 25, True)
        classification_outside_range_4 = ClassificationResultTableRow('1610121696.file.png', -1000, True)

        assert classification_outside_range_1.is_invalid
        assert classification_outside_range_2.is_invalid
        assert classification_outside_range_3.is_invalid
        assert classification_outside_range_4.is_invalid

        signature_wrong_datatype_1 = ClassificationResultTableRow('1610121696.file.pdf', 2, 1)
        signature_wrong_datatype_2 = ClassificationResultTableRow('1610121696.file.pdf', 2, [])
        signature_wrong_datatype_3 = ClassificationResultTableRow('1610121696.file.pdf', 2, 'True')
        signature_wrong_datatype_4 = ClassificationResultTableRow('1610121696.file.pdf', 2, 2.3)

        assert signature_wrong_datatype_1.is_invalid
        assert signature_wrong_datatype_2.is_invalid
        assert signature_wrong_datatype_3.is_invalid
        assert signature_wrong_datatype_4.is_invalid

        signature_correct_datatype_1 = ClassificationResultTableRow('1610122596.doc.png', 2, True)
        signature_correct_datatype_2 = ClassificationResultTableRow('1610122596.doc.png', 2, False)

        assert not signature_correct_datatype_1.is_invalid
        assert not signature_correct_datatype_2.is_invalid


    # This function creates a tuple for insertion into the database
    def test_ClassificationResultTableRow_tuple_generator(self):
        invalid_obj = ClassificationResultTableRow('1610121696.file.png', ['list', 'for', 'some', 'reason'], True)

        assert invalid_obj.to_tuple() is None

        valid_obj_1 = ClassificationResultTableRow('1610121696.file.png', 0, False)
        valid_obj_2 = ClassificationResultTableRow('1610121696.this.is.a.valid.filename.pdf', 1, False)
        valid_obj_3 = ClassificationResultTableRow('1610124814.file.png', 2, True)

        assert valid_obj_1.to_tuple() == (1610121696, 'file.png', 0, False)
        assert valid_obj_2.to_tuple() == (1610121696, 'this.is.a.valid.filename.pdf', 1, False)
        assert valid_obj_3.to_tuple() == (1610124814, 'file.png', 2, True)


    def tearDown(self):
        pass